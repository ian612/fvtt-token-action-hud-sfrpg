const e={ID:"token-action-hud-sfrpg"},t={ID:"token-action-hud-core"},s="1.4",i={1:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",2:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",3:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",free:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",reaction:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",passive:"",A:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",D:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",T:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",F:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",R:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>"},a={action:"ITEM.TypeAction",attribute:"tokenActionHud.pf2e.attribute",auxAction:"PF2E.WeaponStrikeLabel",condition:"ITEM.TypeCondition",effect:"ITEM.TypeEffect",familiarAttack:"PF2E.AttackLabel",feat:"PF2E.Item.Feat.LevelLabel",item:"PF2E.ItemTitle",save:"tokenActionHud.pf2e.save",skill:"PF2E.SkillLabel",spell:"ITEM.TypeSpell",strike:"PF2E.WeaponStrikeLabel",toggle:"tokenActionHud.pf2e.toggle",utility:"tokenActionHud.utility"},n={acrobatics:"acr",arcana:"arc",athletics:"ath",crafting:"cra",deception:"dec",diplomacy:"dip",intimidation:"itm",medicine:"med",nature:"nat",occultism:"occ",performance:"prf",religion:"rel",society:"soc",stealth:"ste",survival:"sur",thievery:"thi"},o={melee:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/sword.svg" title="Melee Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">',thrown:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/thrown.svg" title="Thrown Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">'},l={melee:{name:"PF2E.WeaponRangeMelee"},ranged:{name:"PF2E.NPCAttackRanged"},thrown:{name:"PF2E.TraitThrown"}},c={attack:{id:"attack",name:"PF2E.AttackLabel",type:"system"},toggles:{id:"toggles",name:"PF2E.TogglesLabel",type:"system"},strikes:{id:"strikes",name:"PF2E.StrikesLabel",type:"system"},actions:{id:"actions",name:"PF2E.ActionsActionsHeader",type:"system"},reactions:{id:"reactions",name:"PF2E.ActionsReactionsHeader",type:"system"},freeActions:{id:"free-actions",name:"PF2E.ActionsFreeActionsHeader",type:"system"},passives:{id:"passives",name:"PF2E.NPC.PassivesLabel",type:"system"},weapons:{id:"weapons",name:"PF2E.InventoryWeaponsHeader",type:"system"},armor:{id:"armor",name:"PF2E.InventoryArmorHeader",type:"system"},equipment:{id:"equipment",name:"PF2E.InventoryEquipmentHeader",type:"system"},consumables:{id:"consumables",name:"PF2E.InventoryConsumablesHeader",type:"system"},containers:{id:"containers",name:"PF2E.InventoryBackpackHeader",type:"system"},treasure:{id:"treasure",name:"PF2E.InventoryTreasureHeader",type:"system"},ancestryFeatures:{id:"ancestry-features",name:"PF2E.FeaturesAncestryHeader",type:"system"},classFeatures:{id:"class-features",name:"PF2E.FeaturesClassHeader",type:"system"},ancestryFeats:{id:"ancestry-feats",name:"PF2E.FeatAncestryHeader",type:"system"},classFeats:{id:"class-feats",name:"PF2E.FeatClassHeader",type:"system"},skillFeats:{id:"skill-feats",name:"PF2E.FeatSkillHeader",type:"system"},generalFeats:{id:"general-feats",name:"PF2E.FeatGeneralHeader",type:"system"},bonusFeats:{id:"bonus-feats",name:"PF2E.FeatBonusHeader",type:"system"},spells:{id:"spells",name:"PF2E.SpellLabelPlural",type:"system"},heroPoints:{id:"hero-points",name:"PF2E.HeroPointsLabel",type:"system"},initiative:{id:"initiative",name:"PF2E.InitiativeLabel",type:"system"},perceptionCheck:{id:"perception-check",name:"PF2E.PerceptionLabel",type:"system"},coreSkills:{id:"core-skills",name:"PF2E.CoreSkillsHeader",type:"system"},loreSkills:{id:"lore-skills",name:"PF2E.LoreSkillsHeader",type:"system"},conditions:{id:"conditions",name:"PF2E.ConditionsLabel",type:"system"},effects:{id:"effects",name:"PF2E.EffectsLabel",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},recoveryCheck:{id:"recovery-check",name:"PF2E.Check.Specific.Recovery",type:"system"},rests:{id:"rests",name:"tokenActionHud.pf2e.rests",type:"system"},saves:{id:"saves",name:"PF2E.SavesHeader",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}};let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class Utils{static getSetting(s,i=null){let a=i??null;try{a=game.settings.get(e.ID,s)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}return a}static async setSetting(s,i){try{i=await game.settings.set(e.ID,s,i),t.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{d=class ActionHandler extends e.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;abbreviateSkills=null;calculateAttackPenalty=null;colorSkills=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(t){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type;if(!this.actorType||["character","npc","familiar"].includes(this.actorType)){if(this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}this.abbreviateSkills=r.getSetting("abbreviateSkills"),this.calculateAttackPenalty=r.getSetting("calculateAttackPenalty"),this.colorSkills=r.getSetting("colorSkills"),this.groupIds=t,"character"===this.actorType&&await this._buildCharacterActions(),"familiar"===this.actorType&&await this._buildFamiliarActions(),"npc"===this.actorType&&await this._buildNpcActions(),this.actor||this._buildMultipleTokenActions()}}async _buildCharacterActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildHeroPoints(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildRecoveryCheck(),this._buildRests(),this._buildSaves(),this._buildSkills(),await this._buildSpells(),this._buildStrikes(),this._buildToggles()}async _buildFamiliarActions(){this._buildAttack(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}async _buildNpcActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills(),this._buildStrikes(),await this._buildSpells()}_buildMultipleTokenActions(){this._buildInitiative(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}_buildActions(){if(0===this.items.size)return;const e=["action","reaction","free","passive"],t=new Map([...this.items].filter((t=>"action"===t[1].type||e.includes(t[1].system?.actionType?.value)))),s=new Map;for(const[e,i]of t){const t=i.system.actionType?.value;switch(t){case"action":s.has("actions")||s.set("actions",new Map),s.get("actions").set(e,i);break;case"reaction":s.has("reactions")||s.set("reactions",new Map),s.get("reactions").set(e,i);break;case"free":s.has("free-actions")||s.set("free-actions",new Map),s.get("free-actions").set(e,i);break;case"passive":s.has("passives")||s.set("passives",new Map),s.get("passives").set(e,i)}}for(const[e,t]of s){const s=t,i={id:e,type:"system"};this._addActions(s,i,"action")}}_buildAttack(){const t="familiarAttack",s=this.actor.system.attack;if(s){const i=s.slug,n=s.name.charAt(0).toUpperCase()+s.name.slice(1),o=`${`${e.api.Utils.i18n(a[t])}: `??""}${n}`,l=[t,i].join(this.delimiter),c=[{id:i,name:n,listName:o,encodedValue:l,info1:s.totalModifier<0?s.totalModifier:`+${s.totalModifier}`}],r={id:"attack",type:"system"};this.addActions(c,r)}}_buildCombat(){const t="utility",s={endTurn:{id:"endTurn",name:e.api.Utils.i18n("tokenActionHud.endTurn")}};game.combat?.current?.tokenId!==this.token?.id&&delete s.endTurn;const i=Object.entries(s).map((s=>{const i=s[1].id,n=s[1].name,o=`${`${e.api.Utils.i18n(a[t])}: `??""}${n}`,l=[t,i].join(this.delimiter);return{id:i,name:n,listName:o,encodedValue:l}}));this.addActions(i,{id:"combat",type:"system"})}async _buildConditions(){const t="condition",s=["doomed","dying","wounded"],i=new Map([...this.items].filter((e=>e[1].type===t)).map((e=>{const t=e[1];return[t.slug,t]}))),n=[...game.pf2e.ConditionManager.conditions].filter((e=>!e[0].startsWith("Compendium")));n.forEach((e=>{e[1].name=e[1].name.replace(" 1","")}));const o=n.map((n=>{const o=n[1].slug,l=i.get(n[0]),c=l?.id,r=n[1].name,d=`${`${e.api.Utils.i18n(a[t])}: `??""}${r}`,p=[t,o].join(this.delimiter),u=e.api.Utils.getImage(n[1]),m=`toggle${c?" active":""}`;let y="";if(c)if(s.includes(l.slug)){const e=this.actor.system.attributes[l.slug],t=e.value,s=e.max;y={text:s>0?`${t??0}/${s}`:""}}else l.system.value.isValued&&(y={text:l.system.value.value});return{id:o,name:r,listName:d,encodedValue:p,cssClass:m,img:u,info1:y}}));await this.addActions(o,{id:"conditions",type:"system"})}async _buildHeroPoints(){const t="heroPoints",s=this.actor.system.resources?.heroPoints,i=s.value,a=s.max,n=[{id:"heroPoints",name:e.api.Utils.i18n("PF2E.HeroPointsLabel"),encodedValue:[t,t].join(this.delimiter),info1:{text:a>0?`${i??0}/${a}`:""}}];this.addActions(n,{id:"hero-points",type:"system"})}_buildEffects(){const e=new Map([...this.items].filter((e=>"effect"===e[1].type&&(!e[1].system?.unidentified&&!e[1].unidentified||game.user.isGM))));this._addActions(e,{id:"effects",type:"system"},"effect")}_buildFeats(){const e={ancestryfeature:"ancestry-features",classfeature:"class-features",ancestry:"ancestry-feats",class:"class-feats",skill:"skill-feats",general:"general-feats",bonus:"bonus-feats"},t=new Map;for(const[s,i]of this.items){if("feat"!==i.type)continue;const a=e[i.system?.category??i.featType];t.has(a)||t.set(a,new Map),t.get(a).set(s,i)}for(const[e,s]of t){const t=s,i={id:e,type:"system"};this._addActions(t,i,"feat")}}_buildInitiative(){const t=this.actor?this.actor.system.attributes.initiative:"PF2E.InitiativeLabel",s=t.totalModifier,i=s||0===s?`${s>=0?"+":""}${s}`:"",a=[{id:"initiative",name:t.label?t.label:"string"==typeof t?e.api.Utils.i18n(t):"",encodedValue:["initiative","initiative"].join(this.delimiter),info1:{text:i}}];this.addActions(a,{id:"initiative",type:"system"})}async _buildInventory(){if(0===this.items.size)return;const e=new Map;for(const[t,s]of this.items){const i=s.system?.quantity>0,a=this._isEquippedItem(s),n=s.type;i&&(a&&(e.has("equipped")||e.set("equipped",new Map),e.get("equipped").set(t,s)),a||(e.has("unequipped")||e.set("unequipped",new Map),e.get("unequipped").set(t,s)),a&&("armor"===n&&"character"===this.actorType&&(e.has("armors")||e.set("armors",new Map),e.get("armors").set(t,s)),"consumable"===n&&(e.has("consumables")||e.set("consumables",new Map),e.get("consumables").set(t,s)),"backpack"===n&&(e.has("containers")||e.set("containers",new Map),e.get("containers").set(t,s)),"equipment"===n&&(e.has("equipment")||e.set("equipment",new Map),e.get("equipment").set(t,s)),"treasure"===n&&(e.has("treasure")||e.set("treasure",new Map),e.get("treasure").set(t,s)),"weapon"===n&&(e.has("weapons")||e.set("weapons",new Map),e.get("weapons").set(t,s))))}for(const[t,s]of e){const e=s,i={id:t,type:"system"};this._addActions(e,i)}if(e.has("containers")){const t={id:"containers",type:"system"},s=e.get("containers");for(const[e,i]of s){const s=i,a=s.contents;if(!a.size)continue;const n={id:e,name:s.name,listName:`Group: ${s.name}`,type:"system-derived"};await this.addGroup(n,t);const o=new Map(a.map((e=>[e.id,e])));this._addActions(o,n)}}}_buildPerceptionCheck(){const t=this.actor?this.actor.system.attributes.perception:CONFIG.PF2E.attributes.perception;if(!t.totalModifier)return;const s=t.totalModifier,i=s||0===s?`${s>=0?"+":""}${s}`:"",a=[{id:"perception",name:e.api.Utils.i18n(CONFIG.PF2E.attributes.perception),encodedValue:["perceptionCheck","perception"].join(this.delimiter),info1:{text:i}}];this.addActions(a,{id:"perception-check",type:"system"})}_buildRecoveryCheck(){const t="recoveryCheck",s=this.actor.system.attributes?.dying;if(s?.value>=1){const s=[{id:t,name:e.api.Utils.i18n("PF2E.Check.Specific.Recovery"),encodedValue:[t,t].join(this.delimiter)}],i={id:"recovery-check",type:"system"};this.addActions(s,i)}}_buildRests(){if(!this.actor&&!this.actors.every((e=>"character"===e.type)))return;const t="utility",s=[{id:"treatWounds",name:e.api.Utils.i18n("PF2E.Actions.TreatWounds.Label"),encodedValue:[t,"treatWounds"].join(this.delimiter)},{id:"rest",name:e.api.Utils.i18n("PF2E.Actor.Character.Rest.Label"),encodedValue:[t,"rest"].join(this.delimiter)}];game.settings.get("pf2e","staminaVariant")&&s.push({id:"takeBreather",name:e.api.Utils.i18n("tokenActionHud.pf2e.takeBreather"),encodedValue:[t,"takeBreather"].join(this.delimiter)});this.addActions(s,{id:"rests",type:"system"})}_buildSaves(){const t="save",s=this.actor?Object.entries(this.actor.saves||[]):Object.entries(CONFIG.PF2E.saves);if(!s)return;const i=s.map((s=>{const i=s[0],n=s[1].label??("string"==typeof s[1]?e.api.Utils.i18n(s[1]):""),o=`${`${e.api.Utils.i18n(a[t])}: `??""}${n}`,l=[t,i].join(this.delimiter);return{id:i,name:n,listName:o,encodedValue:l}}));this.addActions(i,{id:"saves",type:"system"})}_buildSkills(){const t="skill",s=this.actor?Object.entries(this.actor.skills).filter((e=>!!e[1].label&&e[1].label.length>1)):this._getSharedSkills();if(!s)return;const i=new Map;for(const e of s){const t=e[1].lore;i.has("skills")||i.set("skills",new Map),i.get("skills").set(e[0],e[1]),t&&(i.has("lore-skills")||i.set("lore-skills",new Map),i.get("lore-skills").set(e[0],e[1])),t||(i.has("core-skills")||i.set("core-skills",new Map),i.get("core-skills").set(e[0],e[1]))}for(const[s,o]of i){const i={id:s,type:"system"},l=[...o].map((s=>{const i=s[0],o=s[1],l=e.api.Utils.i18n(o.label)??e.api.Utils.i18n(CONFIG.PF2E.skillList[s[0]]),c=this.abbreviatedSkills?n[o.slug]??l:l,r=`${`${e.api.Utils.i18n(a[t])}: `??""}${c}`,d=[t,i].join(this.delimiter),p=this.actor&&this.colorSkills&&o.rank>0?`tah-pf2e-skill-rank-${o.rank}`:"",u=o.check?.mod;return{id:i,name:c,listName:r,encodedValue:d,cssClass:p,info1:this.actor?{text:u||0===u?`${u>=0?"+":""}${u}`:""}:""}}));this.addActions(l,i)}}_getSharedSkills(){if(!this.actors)return;const e=this.actors.map((e=>Object.entries(e.skills).filter((e=>!!e[1].label&&e[1].label.length>1)))),t=Math.min(...e.map((e=>e.length)));return e.find((e=>e.length===t)).filter((t=>e.every((e=>e.some((e=>e[0]===t[0]))))))}async _buildSpells(){const t={id:"spells",type:"system"},s=[...this.items].filter((e=>"spellcastingEntry"===e[1].type));for(const i of s){const s=`spells+${i[1].name.slugify({replacement:"-",strict:!0})}`,a={id:s,name:i[1].name,type:"system-derived",info1:this._getSpellDcInfo(i[1])};await this.addGroup(a,t),this.addGroupInfo(a);const n=await(i[1].getSpellData?i[1].getSpellData():i[1].getSheetData()),o=n.levels.filter((e=>e.active.length>0));for(const t of Object.entries(o)){const i=t[1].level,o={id:`${s}+${i}`,name:String(e.api.Utils.i18n(t[1].label)),type:"system-derived"};await this.addGroup(o,a),await this._addSpellSlotInfo(a,o,t,n);const l=t[1].active.filter((e=>!e?.expended&&e)).map((e=>e.spell)),c=new Map(l.map((e=>[e.id,e])));await this._addActions(c,o,"spell",i)}}}async _addSpellSlotInfo(t,s,i,n){const o=i[1].isCantrip,l=n.isFlexible,c=n.isFocusPool,r=n.isInnate,d=n.isPrepared;if(!c&&(o||r))return;if(!c&&d&&!l)return;const p="spellSlot",u=this.actor.system.resources.focus,m=i[1].uses,y=c?"focus":`slot${i[1].level}`,h="focus"===y?u?.max:m?.max,f={text:h>=0?`${("focus"===y?u?.value:m?.value)??0}/${h}`:""};s.info={info1:f},this.addGroupInfo(s);const g=e.api.Utils.i18n(a.spell),k=[{id:`${n.id}>${y}>slotIncrease`,name:"+",listName:`${g}: ${t.name}: ${s.name}: +`,encodedValue:[p,`${n.id}>${y}>slotIncrease`].join(this.delimiter),cssClass:"shrink"},{id:`${n.id}>${y}>slotDecrease`,name:"-",listName:`${g}: ${t.name}: ${s.name}: -`,encodedValue:[p,`${n.id}>${y}>slotDecrease`].join(this.delimiter),cssClass:"shrink"}];this.addActions(k,s)}_buildStrikes(){const t="strike",s={id:"strikes",type:"system"},i=this.actor.system.actions.filter((e=>e.type===t&&(e.item.system.quantity>0||"npc"===this.actor.type)));if(i)for(const n of i){const i=n.item.id,c=`strikes+${i}`,r=n.label,d=`${e.api.Utils.i18n(a.strike)}: ${n.label} (${n.item.id})`,p={id:c,name:r,listName:d,type:"system-derived"};if(this.addGroup(p,s),n.auxiliaryActions?.length){const t="auxAction",s=n.auxiliaryActions.map(((e,t)=>{const s=encodeURIComponent(`${i}>${t}>`),a=e.label;return{id:s,name:a,listName:`${d}: ${a}`,actionIcon:e.img}})),a={img:n.imageUrl};s[0]&&(s[0].img=e.api.Utils.getImage(a));const o=s.map((e=>this._getAction(t,e)));this.addActions(o,p)}const u=n.altUsages?[n,...n.altUsages]:[n];for(const s of u){const a=n.glyph;let r;switch(`${s.item.isMelee}_${s.item.isThrown}_${s.item.isRanged}`){case"true_false_false":r="melee";break;case"false_true_true":r="thrown";break;case"false_false_true":r="ranged"}const m=`${c}+${r}`,y=s.attackRollType?e.api.Utils.i18n(s.attackRollType):e.api.Utils.i18n(l[r].name),h=`${d}: ${y}`,f="thrown"!==r&&a?`<span style='font-family: "Pathfinder2eActions"; font-size: var(--font-size-20);'>${a}</span>`:o[r],g={showTitle:u.length>1},k={id:m,name:y,listName:h,icon:f,type:"system-derived",settings:g};this.addGroup(k,p);const b=s.ready,_=s.variants.map(((e,s)=>{const a=encodeURIComponent(`${i}>${s}>`+r),o=e.label.includes("MAP")?n.totalModifier+parseInt(e.label.split(" ")[1]):parseInt(e.label.split(" ")[1]),l=this.calculateAttackPenalty?o>=0?`+${o}`:`${o}`:e.label;return{actionType:t,id:a,name:l,listName:`${h}: ${l}`,systemSelected:b}})),A=encodeURIComponent(`${i}>damage>${r}`),v=e.api.Utils.i18n("PF2E.DamageLabel"),I=`${h}: ${v}`;_.push({actionType:t,id:A,name:v,listName:I,systemSelected:b});const P=encodeURIComponent(`${i}>critical>${r}`),$=e.api.Utils.i18n("PF2E.CriticalDamageLabel"),S=`${h}: ${$}`;if(_.push({actionType:t,id:P,name:$,listName:S,systemSelected:b}),s.selectedAmmoId&&!s.ammunition){const i=this.actor.items.get(s.selectedAmmoId);if(i)i.actionType=t,_.push(i);else{const s="noAmmo",i=e.api.Utils.i18n("tokenActionHud.pf2e.noAmmo"),a=`${h}: ${i}`;_.push({actionType:t,id:s,name:i,listName:a,systemSelected:b})}}const w=_.map((e=>this._getAction(t,e)));this.addActions(w,k)}}}_buildToggles(){const t="toggle",s=this.actor.system.toggles;if(!s.length)return;const i=s.map((s=>{const i=[s.domain,s.option].join("."),a=e.api.Utils.i18n(s.label);return{id:i,encodedValue:[t,JSON.stringify(s)].join(this.delimiter),name:a,cssClass:`toggle${s.checked?" active":""}`}}));this.addActions(i,{id:"toggles",type:"system"})}_getAttributePoolAction(e,t,s,i){const a=t.slugify({replacement:"-",strict:!0});return{id:a,name:t,encodedValue:[e,a].join(this.delimiter),info1:{text:`${s}/${i}`}}}async _addActions(e,t,s="item",i=null){if(0===e.size)return;if(!("string"==typeof t?t:t?.id))return;const a=[...e].map((e=>this._getAction(s,e[1],i)));await this.addActions(a,t)}_getAction(t,s,i){const n="spell"===t?`${s.id??s._id}-${i}`:s.id??s._id,o=s?.name??s?.label,l=`${e.api.Utils.i18n(a[t])}: `??"",c=s.listName??`${l}${o}`;let r="";if(Object.hasOwn(s,"disabled")){r=`toggle${s.disabled?"":" active"}`}const d=s?.spellcasting?.id,p=[t,"spell"===t?`${d}>${i}>${s.id??s._id}`:n].join(this.delimiter),u=s.system?.actions,m=s.system?.actionType?.value,y=u?parseInt((u||{}).value,10):null,h=s.system?.time?.value,f=s.actionIcon,g="spell"===t?h:["free","reaction","passive"].includes(m)?m:y??f,k=this._getActionIcon(g),b=e.api.Utils.getImage(s),_="spell"===t?this._getSpellInfo(s):this._getItemInfo(s),A=_?.info1,v=_?.info2,I=_?.info3;return{id:n,name:o,encodedValue:p,cssClass:r,img:b,icon1:k,info1:A,info2:v,info3:I,listName:c,systemSelected:s?.systemSelected??null}}_isSlowAction(e){return["downtime","exploration"].includes(e.system.traits?.value)}_getSpellDcInfo(t){let s="";const i=t.statistic,a="function"==typeof i.dc?i.dc().value:i.dc.value,n=i.check.mod;return s=`${n>=0?`${e.api.Utils.i18n("tokenActionHud.pf2e.atk")} +${n}`:`${e.api.Utils.i18n("tokenActionHud.pf2e.atk")} ${n}`} ${`${e.api.Utils.i18n("tokenActionHud.pf2e.dc")}${a}`}`,s}_getSpellInfo(e){return{info1:this._getComponentsInfo(e),info2:this._getUsesData(e)}}_getComponentsInfo(e){return{text:e.components.value??e.system.components?.value??"",title:Object.entries(e.components).filter((e=>!0===e[1])).map((e=>e[0].trim().charAt(0).toUpperCase()+e[0].slice(1))).join(", ")}}_getUsesData(e){const t=e?.uses?.value,s=e?.uses?.max;return{text:t&&s>=0?`${t}/${s}`:""}}_getActors(){const e=["character","npc"],t=canvas.tokens.controlled.map((e=>e.actor));if(t.every((t=>e.includes(t.type))))return t}_isEquippedItem(e){const t=e.system.equipped?.carryType;return!!this.showUnequippedItems||!(!["held","worn"].includes(t)||e.system.containerId?.value?.length)}_getItemInfo(e){return{info1:{text:this._getQuantityData(e)??""}}}_getQuantityData(e){const t=e?.system?.quantity?.value;return t>1?t:""}_getActionIcon(e){return i[e]}_foundrySort(e,t){return e?.sort||t?.sort?e.sort-t.sort:0}}}));let p=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=c;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.name)}`}));const s=Object.values(t);p={layout:[{nestId:"attack",id:"attack",name:e.api.Utils.i18n("PF2E.AttackLabel"),groups:[{...t.attack,nestId:"attack_attack"}]},{nestId:"actions",id:"actions",name:e.api.Utils.i18n("PF2E.ActionsActionsHeader"),groups:[{...t.toggles,nestId:"actions_toggles"},{...t.strikes,nestId:"actions_strikes"},{...t.actions,nestId:"actions_actions"},{...t.reactions,nestId:"actions_reactions"},{...t.freeActions,nestId:"actions_free-actions"},{...t.passives,nestId:"actions_passives"}]},{nestId:"inventory",id:"inventory",name:e.api.Utils.i18n("PF2E.TabInventoryLabel"),groups:[{...t.weapons,nestId:"inventory_weapons"},{...t.armor,nestId:"inventory_armor"},{...t.equipment,nestId:"inventory_equipment"},{...t.consumables,nestId:"inventory_consumables"},{...t.containers,nestId:"inventory_containers"},{...t.treasure,nestId:"inventory_treasure"}]},{nestId:"feats",id:"feats",name:e.api.Utils.i18n("PF2E.TabFeatsLabel"),groups:[{...t.ancestryFeatures,nestId:"feats_ancestry-features"},{...t.classFeatures,nestId:"feats_class-features"},{...t.ancestryFeats,nestId:"feats_ancestry-feats"},{...t.classFeats,nestId:"feats_class-feats"},{...t.skillFeats,nestId:"feats_skill-feats"},{...t.generalFeats,nestId:"feats_general-feats"},{...t.bonusFeats,nestId:"feats_bonus-feats"}]},{nestId:"spells",id:"spells",name:e.api.Utils.i18n("PF2E.SpellLabelPlural"),groups:[{...t.spells,nestId:"spells_spells"}]},{nestId:"attributes",id:"attributes",name:e.api.Utils.i18n("tokenActionHud.pf2e.attributes"),groups:[{...t.heroPoints,nestId:"attributes_hero-points"},{...t.initiative,nestId:"attributes_initiative"},{...t.perceptionCheck,nestId:"attributes_perception-check"},{...t.saves,nestId:"attributes_saves"}]},{nestId:"skills",id:"skills",name:e.api.Utils.i18n("PF2E.SkillsLabel"),groups:[{...t.coreSkills,nestId:"skills_core-skills"},{...t.loreSkills,nestId:"skills_lore-skills"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("PF2E.EffectsLabel"),groups:[{...t.conditions,nestId:"effects_conditions"},{...t.effects,nestId:"effects_effects"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.combat,nestId:"utility_combat"},{...t.token,nestId:"utility_token"},{...t.recoveryCheck,nestId:"utility_recovery-check"},{...t.rests,nestId:"utility_rests"},{...t.utility,nestId:"utility_utility"}]}],groups:s}}));let u=null;function register(t){game.settings.register(e.ID,"calculateAttackPenalty",{name:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"colorSkills",{name:game.i18n.localize("tokenActionHud.pf2e.settings.colorSkills.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.colorSkills.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{u=class RollHandler extends e.api.RollHandler{BLIND_ROLL_MODE="blindRoll";async doHandleActionEvent(e,t){const s=t.split("|");2!==s.length&&super.throwInvalidValueErr();const i=s[0],a=s[1];if(["item","feat","action","lore","ammo"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,a);const n=["character","familiar","npc"];if(this.actor)await this._handleMacros(e,i,this.actor,this.token,a);else{const t=canvas.tokens.controlled.filter((e=>n.includes(e.actor?.type)));for(const s of t){const t=s.actor;await this._handleMacros(e,i,t,s,a)}}}async _handleMacros(e,t,s,i,a){let n;s&&(n=s.type);if(!["ability","spell","item","skill","lore","utility","toggle","strike"].includes(t))switch(n){case"npc":await this._handleUniqueActionsNpc(e,t,s,i,a);break;case"character":case"familiar":await this._handleUniqueActionsChar(e,t,s,i,a)}switch(t){case"ability":this._rollAbility(e,s,a);break;case"action":case"feat":case"item":this._rollItem(s,a);break;case"condition":this._toggleCondition(s,a);break;case"effect":this._adjustEffect(s,a);break;case"spell":await this._rollSpell(s,a);break;case"skill":await this._rollSkill(e,s,a);break;case"strike":this._rollStrikeChar(e,s,a);break;case"toggle":await this._performToggleMacro(s,a);break;case"utility":this._performUtilityMacro(i,a)}}async _handleUniqueActionsChar(e,t,s,i,a){switch(t){case"save":this._rollSave(e,s,a);break;case"initiative":s.initiative.roll();break;case"attribute":case"perceptionCheck":this._rollAttributeChar(e,s,a);break;case"spellSlot":await this._adjustSpellSlot(s,a);break;case"heroPoints":await this._adjustResources("heroPoints","value",s);break;case"recoveryCheck":s.rollRecovery({event:e});break;case"familiarAttack":this._rollFamiliarAttack(e,s);break;case"auxAction":this._performAuxAction(s,a)}}async _handleUniqueActionsNpc(e,t,s,i,a){switch(t){case"initiative":s.initiative.roll();break;case"attribute":case"perceptionCheck":await this._rollAttributeNpc(e,s,a);break;case"save":this._rollSave(e,s,a);break;case"strike":this._rollStrikeNpc(e,s,a)}}async _rollSkill(e,t,s){const i=t.skills[s];await i.check.roll({event:e})}_rollAbility(e,t,s){t.rollAbility(e,s)}_rollAttributeChar(e,t,s){const i=t.system.attributes[s];if(i){const s=t.getRollOptions(["all",i]);i.roll({event:e,options:s})}else t.rollAttribute(e,s)}async _rollAttributeNpc(e,t,s){t.rollAttribute(e,s)}async _adjustSpellSlot(e,t){const s=decodeURIComponent(t).split(">"),i=s[0],a=s[1],n=s[2],o=e.items.get(i);let l,c,r;if("focus"===a)l=e.system.resources.focus.value,c=e.system.resources.focus.max;else{const e=o.system.slots;l=e[a].value,c=e[a].max}switch(n){case"slotIncrease":if(l>=c)break;l++;break;case"slotDecrease":if(l<=0)break;l--}"focus"===a?e.update({"data.resources.focus.value":l}):(r=[{_id:o.id,data:{slots:{[a]:{value:l}}}}],await Item.updateDocuments(r,{parent:e})),Hooks.callAll("forceUpdateTokenActionHUD")}_rollSave(e,t,s){t.saves[s].check.roll({event:e})}async _updateRollMode(e){await game.settings.set("core","rollMode",e)}_rollStrikeChar(e,t,s){const i=decodeURIComponent(s).split(">"),a=i[0],n=i[1],o=i[2]?i[2]:null;let l=null,c=t.system.actions.filter((e=>"strike"===e.type)).find((e=>(e.item.id??e.slug)===a));if(this.isRenderItem()){const e=c.item;if(e&&"xxPF2ExUNARMEDxx"!==e.id)return this.doRenderItem(t,e.id)}if(c.altUsages?.length)switch(!0){case"melee"===o&&!c.item.isMelee:l=o,c=c.altUsages.find((e=>e.item.isMelee));break;case"ranged"===o&&!c.item.isRanged:l=o,c=c.altUsages.find((e=>e.item.isRanged));break;case"thrown"===o&&!c.item.isThrown:l=o,c=c.altUsages.find((e=>e.item.isThrown))}switch(n){case"damage":c.damage({event:e});break;case"critical":c.critical({event:e});break;default:c.variants[n]?.roll({event:e,altUsage:l})}}_performAuxAction(e,t){const s=decodeURIComponent(t).split(">"),i=s[0],a=s[1],n=s[2];let o=e.system.actions.filter((e=>"strike"===e.type)).find((e=>(e.item.id??e.slug)===i));if(this.isRenderItem()){const t=o.origin;if(t)return this.doRenderItem(e,t.id)}""!==n&&(o=o[n]),o.auxiliaryActions[a]?.execute()}_rollStrikeNpc(e,t,s){const i=decodeURIComponent(s).split(">"),a=i[0],n=i[1];if("plus"===a){const e=t.items.find((e=>0===n.toUpperCase().localeCompare(e.name.toUpperCase(),void 0,{sensitivity:"base"})));return this.isRenderItem()?this.doRenderItem(t,e.id):void e.toChat()}if(this.isRenderItem())return this.doRenderItem(t,a);const o=t.items.get(a);switch(n){case"damage":o.rollNPCDamage(e);break;case"critical":o.rollNPCDamage(e,!0);break;case"0":o.rollNPCAttack(e);break;case"1":o.rollNPCAttack(e,2);break;case"2":o.rollNPCAttack(e,3)}}_rollItem(e,t){e.items.get(t).toChat()}_rollFamiliarAttack(e,t){const s=t.getRollOptions(["all","attack"]);t.system.attack.roll(e,s)}async _rollSpell(e,t){const s=decodeURIComponent(t).split(">"),[i,a,n,o]=s;if(this.isRenderItem())return this.doRenderItem(e,n);const l=e.items.get(i),c=e.items.get(n);l&&c&&(await l.cast(c,{message:!o,consume:!0,level:Number(a)}),Hooks.callAll("forceUpdateTokenActionHUD"))}async _performUtilityMacro(e,t){switch(t){case"treatWounds":this._executeMacroById("6duZj0Ygiqv712rq");break;case"rest":this._executeMacroById("0GU2sdy3r2MeC56x");break;case"takeBreather":this._executeMacroById("aS6F7PSUlS9JM5jr");break;case"endTurn":game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}async _executeMacroById(e){game.packs.get("pf2e.pf2e-macros").getDocument(e).then((e=>e.execute()))}async _adjustResources(e,t,s){let i=s.system.resources[e][t];const a=s.system.resources[e].max;if(this.rightClick){if(i<=0)return;i--}else{if(i>=a)return;i++}const n=[{_id:s.id,data:{resources:{[e]:{[t]:i}}}}];await Actor.updateDocuments(n),Hooks.callAll("forceUpdateTokenActionHUD")}async _toggleCondition(e,t){this.rightClick?e.decreaseCondition(t):e.increaseCondition(t),Hooks.callAll("forceUpdateTokenActionHUD")}async _adjustEffect(t,s){const i=e.api.Utils.getItem(t,s);this.rightClick?i.decrease():i.increase(),Hooks.callAll("forceUpdateTokenActionHUD")}async _performToggleMacro(e,t){const s=JSON.parse(t);s.domain&&s.option&&await e.toggleRollOption(s.domain,s.option,s.itemId)}}}));let m=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{m=class SystemManager extends e.api.SystemManager{doGetCategoryManager(t){return new e.api.CategoryManager}doGetActionHandler(e){return new d(e)}getAvailableRollHandlers(){return{core:"Core PF2E"}}doGetRollHandler(e){let t;return t=new u,t}doRegisterSettings(e){register(e)}async doRegisterDefaultFlags(){return p}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.4",SystemManager:m},Hooks.call("tokenActionHudSystemReady",t)}));export{i as ACTION_ICON,a as ACTION_TYPE,d as ActionHandler,t as CORE_MODULE,p as DEFAULTS,c as GROUP,e as MODULE,s as REQUIRED_CORE_MODULE_VERSION,u as RollHandler,n as SKILL_ABBREVIATION,o as STRIKE_ICON,l as STRIKE_USAGE,m as SystemManager,r as Utils,register};
